git clone https://github.com/ShallowU/VideoGuard.git
cd VideoGuard/

# 2. 查看环境信息
echo "公网IP: $(curl -s ifconfig.me)"
echo "当前用户: $(whoami)"
echo "Python路径: $(which python)"

# 查看云容器公网IP
curl ifconfig.me
# 切到anaconda环境中

# 测试
nvidia-smi
nvcc -v
# 验证CUDA可用性
python -c "import torch; print(f'CUDA available: {torch.cuda.is_available()}')"
python -c "import torch; print(f'GPU count: {torch.cuda.device_count()}')"

# 3.安装ffmpeg
sudo apt update
sudo apt install ffmpeg -y
# 检查FFmpeg是否支持CUDA
ffmpeg -encoders | grep nvenc
ffmpeg -hwaccels

# 安装python环境
pip install -r requirements.txt
pip install funasr==1.2.6
# 安装GPU监控工具
pip install gpustat

# 监控GPU使用情况
watch -n 1 gpustat

# 测试外网访问
python -m http.server 8800
# 外网：


# 改动main.py的8800端口和前端api端口


# 检查端口使用情况
netstat -tlnp 

# Ubuntu防火墙设置（选做）
sudo ufw allow 8800
sudo ufw reload
sudo ufw disable
sudo systemctl stop iptables 2>/dev/null || true
sudo systemctl stop firewalld 2>/dev/null || true




# 重载systemd配置
sudo systemctl daemon-reload
# 启动服务
sudo systemctl start videoguard
# 设置开机自启
sudo systemctl enable videoguard
# 查看服务状态
sudo systemctl status videoguard
# 停止服务
sudo systemctl stop videoguard
# 重启服务
sudo systemctl restart videoguard


# 本地测试
curl http://localhost:8800/health

# 公网测试
curl http://223.109.239.11:/health


sudo vim /etc/systemd/system/VideoGuardFrontend.service

[Unit]
Description=Serve Application
After=network.target

[Service]
Type=simple
User=vipuser
WorkingDirectory=/home/vipuser/VideoGuardFrontend
ExecStart=/usr/local/bin/serve build -p 8801
Restart=always
RestartSec=10

[Install]
WantedBy=multi-user.target



sudo vim /etc/systemd/system/videoguard.service
[Unit]
Description=VideoGuard AI Video Content Detection Service
After=network.target

[Service]
Type=simple
User=root
WorkingDirectory=/home/vipuser/VideoGuard
Environment=PATH=/home/vipuser/anaconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
Environment=CONDA_DEFAULT_ENV=base
Environment=CONDA_PREFIX=/home/vipuser/anaconda3
ExecStart=/home/vipuser/anaconda3/bin/python main.py
Restart=always
RestartSec=10
StandardOutput=journal
StandardError=journal

[Install]
WantedBy=multi-user.target

# 下载github仓库
git clone https://github.com/Kcollision/VideoGuardFrontend.git
# 前端配置
curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.0/install.sh | bash
source ~/.bashrc
nvm install 22.15.1
nvm use 22.15.1
nvm alias default 22.15.1
npm install -g npm@11.4.0
node -v
npm -v

# 安装依赖
npm install
# 如果有serve工具，先全局安装
npm install -g serve
# 或者构建生产版本
npm run build
# 然后服务构建后的文件
serve -s build -p 8801

## 配置域名
sudo apt install nginx -y

sudo vim /etc/nginx/sites-available/videoguard.tech

server {
    listen 80;
    server_name videoguard.tech www.videoguard.tech;
    
    # 前端React应用
    location / {
        proxy_pass http://127.0.0.1:8801;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # 支持大文件上传
        client_max_body_size 100M;
        proxy_connect_timeout 300;
        proxy_send_timeout 300;
        proxy_read_timeout 300;
    }
    
    # 后端API接口
    location /api/ {
        proxy_pass http://127.0.0.1:8800/;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # AI处理需要更长时间
        client_max_body_size 100M;
        proxy_connect_timeout 600;
        proxy_send_timeout 600;
        proxy_read_timeout 600;
    }
    
    # 健康检查接口
    location /health {
        proxy_pass http://127.0.0.1:8800/health;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
    }
}

# 创建软链接启用站点
sudo ln -s /etc/nginx/sites-available/videoguard.tech /etc/nginx/sites-enabled/

# 测试配置文件语法
sudo nginx -t

# 重启Nginx
sudo systemctl restart nginx

# 设置开机自启
sudo systemctl enable nginx

# 检查域名解析
nslookup videoguard.tech
dig videoguard.tech

# 应该返回您的服务器IP: 223.109.239.11

# 测试外网访问
curl http://videoguard.tech

# 配置https
sudo apt install certbot python3-certbot-nginx -y

sudo certbot --nginx -d videoguard.tech -d www.videoguard.tech
输入邮箱地址（用于证书到期提醒）
同意服务条款（输入 A 同意）
是否共享邮箱给EFF（可选，输入 Y 或 N）

# 检查后端服务
sudo systemctl status videoguard
# 如果没运行，启动它
sudo systemctl start videoguard

# 检查前端服务
sudo systemctl status VideoGuardFrontend
# 如果没运行，启动它
sudo systemctl start VideoGuardFrontend

# 测试HTTP自动跳转HTTPS
curl -I http://videoguard.tech

# 测试HTTPS访问
curl -I https://videoguard.tech

# 查看Nginx错误日志
sudo tail -f /var/log/nginx/error.log

# 查看Certbot日志
sudo tail -f /var/log/letsencrypt/letsencrypt.log

# 检查端口占用
sudo netstat -tlnp | grep :80
sudo netstat -tlnp | grep :443